<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on My website</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Home on My website</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Jun 2021 09:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Code Block Test</title>
      <link>http://localhost:1313/section2/code-block-test/</link>
      <pubDate>Sun, 27 Jun 2021 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/section2/code-block-test/</guid>
      <description>&lt;p&gt;&lt;code&gt;String&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Using indents:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;text&#xA;text&#xA;text&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Fenced code block:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;text&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;text&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;tag&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fenced code block with language (lineNumbersInTable = false):&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// JavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJava&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f3f99d&#34;&gt;String&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;implements&lt;/span&gt; java.&lt;span style=&#34;color:#57c7ff&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#57c7ff&#34;&gt;Serializable&lt;/span&gt;, Comparable&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt;, CharSequence&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;/** The value is used for character storage. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;char&lt;/span&gt; value&lt;span style=&#34;color:#ff6ac1&#34;&gt;[]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;/** The offset is the first index of the storage that is used. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; offset;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;/** The count is the number of characters in the String. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; count;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;/** Cache the hash code for the string */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; hash; &lt;span style=&#34;color:#78787e&#34;&gt;// Default to 0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// Package private constructor which shares value array for speed.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String(&lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; offset, &lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; count, &lt;span style=&#34;color:#9aedfe&#34;&gt;char&lt;/span&gt; value&lt;span style=&#34;color:#ff6ac1&#34;&gt;[]&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#57c7ff&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#57c7ff&#34;&gt;offset&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; offset;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#57c7ff&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; count;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * Returns a new string that is a substring of this string. The&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * substring begins at the specified &amp;lt;code&amp;gt;beginIndex&amp;lt;/code&amp;gt; and&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * extends to the character at index &amp;lt;code&amp;gt;endIndex - 1&amp;lt;/code&amp;gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * Thus the length of the substring is &amp;lt;code&amp;gt;endIndex-beginIndex&amp;lt;/code&amp;gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * &amp;lt;p&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * Examples:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * &amp;lt;blockquote&amp;gt;&amp;lt;pre&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * &amp;#34;hamburger&amp;#34;.substring(4, 8) returns &amp;#34;urge&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * &amp;#34;smiles&amp;#34;.substring(1, 5) returns &amp;#34;mile&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * &amp;lt;/pre&amp;gt;&amp;lt;/blockquote&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * @param      beginIndex   the beginning index, inclusive.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * @param      endIndex     the ending index, exclusive.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * @return     the specified substring.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * @exception  IndexOutOfBoundsException  if the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     *             &amp;lt;code&amp;gt;beginIndex&amp;lt;/code&amp;gt; is negative, or&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     *             &amp;lt;code&amp;gt;endIndex&amp;lt;/code&amp;gt; is larger than the length of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     *             this &amp;lt;code&amp;gt;String&amp;lt;/code&amp;gt; object, or&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     *             &amp;lt;code&amp;gt;beginIndex&amp;lt;/code&amp;gt; is larger than&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     *             &amp;lt;code&amp;gt;endIndex&amp;lt;/code&amp;gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#57c7ff&#34;&gt;substring&lt;/span&gt;(&lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; beginIndex, &lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; endIndex) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (beginIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;&lt;/span&gt; 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff6ac1&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; StringIndexOutOfBoundsException(beginIndex);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (endIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt; count) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff6ac1&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; StringIndexOutOfBoundsException(endIndex);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (beginIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt; endIndex) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff6ac1&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; StringIndexOutOfBoundsException(endIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt; beginIndex);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; ((beginIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;==&lt;/span&gt; 0) &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (endIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;==&lt;/span&gt; count)) &lt;span style=&#34;color:#ff6ac1&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;this&lt;/span&gt; :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; String(offset &lt;span style=&#34;color:#ff6ac1&#34;&gt;+&lt;/span&gt; beginIndex, endIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt; beginIndex, value);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using hugo&amp;rsquo;s &lt;code&gt;highlight&lt;/code&gt; &lt;a href=&#34;%5Bhighlight%5D(https://gohugo.io/content-management/syntax-highlighting/#highlight-shortcode)&#34;&gt;shortcode&lt;/a&gt; (lineNumbersInTable = true):&lt;/p&gt;</description>
    </item>
    <item>
      <title>Changes to String in java (from 1.7.0_06)</title>
      <link>http://localhost:1313/section2/2020-06-06-changes-in-java-string/</link>
      <pubDate>Sat, 06 Jun 2020 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/section2/2020-06-06-changes-in-java-string/</guid>
      <description>&lt;p&gt;Before 1.7.0_06, &lt;code&gt;String&lt;/code&gt; has 4 non static field:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;char[] value&lt;/li&gt;&#xA;&lt;li&gt;int[] offset&lt;/li&gt;&#xA;&lt;li&gt;int count&lt;/li&gt;&#xA;&lt;li&gt;int hash&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;Subing.substring&lt;/code&gt; create a String by sharing the original String&amp;rsquo;s internal &lt;code&gt;char[] value&lt;/code&gt; and setting offset. This saves memory and makes &lt;code&gt;String.substring&lt;/code&gt; run in a constant time($O(1)$).&#xA;Meanwhile, this feature may cause &lt;strong&gt;memory leak&lt;/strong&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://hg.openjdk.java.net/jdk6/jdk6/jdk/file/8deef18bb749/src/share/classes/java/lang/String.java&#34;&gt;http://hg.openjdk.java.net/jdk6/jdk6/jdk/file/8deef18bb749/src/share/classes/java/lang/String.java&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f3f99d&#34;&gt;String&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;implements&lt;/span&gt; java.&lt;span style=&#34;color:#57c7ff&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#57c7ff&#34;&gt;Serializable&lt;/span&gt;, Comparable&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt;, CharSequence&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;/** The value is used for character storage. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;char&lt;/span&gt; value&lt;span style=&#34;color:#ff6ac1&#34;&gt;[]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;/** The offset is the first index of the storage that is used. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; offset;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;/** The count is the number of characters in the String. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; count;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;/** Cache the hash code for the string */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; hash; &lt;span style=&#34;color:#78787e&#34;&gt;// Default to 0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// Package private constructor which shares value array for speed.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String(&lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; offset, &lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; count, &lt;span style=&#34;color:#9aedfe&#34;&gt;char&lt;/span&gt; value&lt;span style=&#34;color:#ff6ac1&#34;&gt;[]&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#57c7ff&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#57c7ff&#34;&gt;offset&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; offset;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#57c7ff&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; count;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * Returns a new string that is a substring of this string. The&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * substring begins at the specified &amp;lt;code&amp;gt;beginIndex&amp;lt;/code&amp;gt; and&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * extends to the character at index &amp;lt;code&amp;gt;endIndex - 1&amp;lt;/code&amp;gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * Thus the length of the substring is &amp;lt;code&amp;gt;endIndex-beginIndex&amp;lt;/code&amp;gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * &amp;lt;p&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * Examples:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * &amp;lt;blockquote&amp;gt;&amp;lt;pre&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * &amp;#34;hamburger&amp;#34;.substring(4, 8) returns &amp;#34;urge&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * &amp;#34;smiles&amp;#34;.substring(1, 5) returns &amp;#34;mile&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * &amp;lt;/pre&amp;gt;&amp;lt;/blockquote&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * @param      beginIndex   the beginning index, inclusive.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * @param      endIndex     the ending index, exclusive.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * @return     the specified substring.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     * @exception  IndexOutOfBoundsException  if the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     *             &amp;lt;code&amp;gt;beginIndex&amp;lt;/code&amp;gt; is negative, or&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     *             &amp;lt;code&amp;gt;endIndex&amp;lt;/code&amp;gt; is larger than the length of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     *             this &amp;lt;code&amp;gt;String&amp;lt;/code&amp;gt; object, or&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     *             &amp;lt;code&amp;gt;beginIndex&amp;lt;/code&amp;gt; is larger than&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     *             &amp;lt;code&amp;gt;endIndex&amp;lt;/code&amp;gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;     */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#57c7ff&#34;&gt;substring&lt;/span&gt;(&lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; beginIndex, &lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; endIndex) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (beginIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;&lt;/span&gt; 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff6ac1&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; StringIndexOutOfBoundsException(beginIndex);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (endIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt; count) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff6ac1&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; StringIndexOutOfBoundsException(endIndex);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (beginIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt; endIndex) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff6ac1&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; StringIndexOutOfBoundsException(endIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt; beginIndex);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; ((beginIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;==&lt;/span&gt; 0) &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (endIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;==&lt;/span&gt; count)) &lt;span style=&#34;color:#ff6ac1&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;this&lt;/span&gt; :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; String(offset &lt;span style=&#34;color:#ff6ac1&#34;&gt;+&lt;/span&gt; beginIndex, endIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt; beginIndex, value);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since Java 1.7.0_06, &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; fields were removed. &lt;code&gt;String.substring&lt;/code&gt; makes new copies of &lt;code&gt;value&lt;/code&gt;, which means we can forget about the memory leak but the runtime becomes $O(N)$ at the same time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Algorithms - Graphs</title>
      <link>http://localhost:1313/section2/2020-05-01-algorithms-graphs/</link>
      <pubDate>Fri, 01 May 2020 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/section2/2020-05-01-algorithms-graphs/</guid>
      <description>&lt;h2 class=&#34;heading&#34; id=&#34;undirected-graphs&#34;&gt;&#xA;  Undirected Graphs&#xA;  &lt;a href=&#34;#undirected-graphs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;some-problems&#34;&gt;&#xA;  Some problems&#xA;  &lt;a href=&#34;#some-problems&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Path&lt;/li&gt;&#xA;&lt;li&gt;Shortest path&lt;/li&gt;&#xA;&lt;li&gt;Cycle&lt;/li&gt;&#xA;&lt;li&gt;Ehler tour: A cycle that uses each edge excatly once.&lt;/li&gt;&#xA;&lt;li&gt;Hamilton tour: A cycle that uses each vertex exactly once&#xA;&lt;ul&gt;&#xA;&lt;li&gt;classical NP-complete problem.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Connectivity&lt;/li&gt;&#xA;&lt;li&gt;MST:&lt;/li&gt;&#xA;&lt;li&gt;Biconnectivity: A vertex whose removal disconnects the graph&lt;/li&gt;&#xA;&lt;li&gt;Planarity&lt;/li&gt;&#xA;&lt;li&gt;Graph isomorphism: Are two graphs identical?&#xA;&lt;ul&gt;&#xA;&lt;li&gt;No one knows so far. A lonstanding open problem&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;representations&#34;&gt;&#xA;  Representations&#xA;  &lt;a href=&#34;#representations&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Real-world graphs tend to be &lt;strong&gt;sparse&lt;/strong&gt; (huge number of vertices, small average vertex degree).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming Language - Subtyping</title>
      <link>http://localhost:1313/section2/2020-04-29-subtyping/</link>
      <pubDate>Wed, 29 Apr 2020 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/section2/2020-04-29-subtyping/</guid>
      <description>&lt;h2 class=&#34;heading&#34; id=&#34;some-good-subtyping-rules&#34;&gt;&#xA;  Some Good Subtyping Rules&#xA;  &lt;a href=&#34;#some-good-subtyping-rules&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Width subtyping: A supertype can have a subset of fields with the same types, i.e., a subtype can have extra fields.&lt;/li&gt;&#xA;&lt;li&gt;Permutation subtypings: A supertype can have the same set of fields with the same types in a different order.&lt;/li&gt;&#xA;&lt;li&gt;Transitivity: if t1 is subtype of t2, and t2 is subtype of t3, then t1 is subtype of t3.&lt;/li&gt;&#xA;&lt;li&gt;Reflexivity: Every type is a subtype of itself.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Given the three features of (1) setting a field, (2) letting depth&#xA;subtyping change the type of a field, and (3) having a sound type system actually prevent field-missing errors, we can have any two of the three, but not all of them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Racket notes</title>
      <link>http://localhost:1313/section2/2020-02-29-racket/</link>
      <pubDate>Sat, 29 Feb 2020 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/section2/2020-02-29-racket/</guid>
      <description>&lt;h2 class=&#34;heading&#34; id=&#34;basic&#34;&gt;&#xA;  Basic&#xA;  &lt;a href=&#34;#basic&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-racket&#34; data-lang=&#34;racket&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;#lang &lt;/span&gt;racket&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ff6ac1&#34;&gt;provide&lt;/span&gt; (&lt;span style=&#34;color:#ff6ac1&#34;&gt;all-defined-out&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;;this is a comment&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ff6ac1&#34;&gt;define&lt;/span&gt; s &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ff6ac1&#34;&gt;define&lt;/span&gt; x &lt;span style=&#34;color:#ff9f43&#34;&gt;3&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ff6ac1&#34;&gt;define&lt;/span&gt; y (&lt;span style=&#34;color:#ff5c57&#34;&gt;+&lt;/span&gt; x &lt;span style=&#34;color:#ff9f43&#34;&gt;2&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ff6ac1&#34;&gt;define&lt;/span&gt; cube1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#ff6ac1&#34;&gt;lambda&lt;/span&gt; (x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#ff5c57&#34;&gt;*&lt;/span&gt; x (&lt;span style=&#34;color:#ff5c57&#34;&gt;*&lt;/span&gt; x x))))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ff6ac1&#34;&gt;define&lt;/span&gt; cube2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#ff6ac1&#34;&gt;lambda&lt;/span&gt; (x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#ff5c57&#34;&gt;*&lt;/span&gt; x x x)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ff6ac1&#34;&gt;define&lt;/span&gt; (cube3 x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#ff5c57&#34;&gt;*&lt;/span&gt; x x x))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ff6ac1&#34;&gt;define&lt;/span&gt; (pow1 x y)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (=y &lt;span style=&#34;color:#ff9f43&#34;&gt;0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#ff5c57&#34;&gt;*&lt;/span&gt; x (pow1 x (&lt;span style=&#34;color:#ff5c57&#34;&gt;-&lt;/span&gt; y &lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;)))))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;; currying&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ff6ac1&#34;&gt;define&lt;/span&gt; pow2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#ff6ac1&#34;&gt;lambda&lt;/span&gt; (x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#ff6ac1&#34;&gt;lambda&lt;/span&gt; (y)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (pow1 x y))))&lt;span style=&#34;color:#ff5c57&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 class=&#34;heading&#34; id=&#34;list&#34;&gt;&#xA;  List&#xA;  &lt;a href=&#34;#list&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Empty list: &lt;code&gt;null&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;()&lt;/code&gt; doesn&amp;quot;t work for &lt;code&gt;null&lt;/code&gt; but &lt;code&gt;&#39;()&lt;/code&gt; does&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;build a list: &lt;code&gt;(list e1 ... en)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Constructor: &lt;code&gt;cons&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Access head of list: &lt;code&gt;car&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Access tail of list: &lt;code&gt;cdr&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Check for empty: &lt;code&gt;null?&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;syntax&#34;&gt;&#xA;  Syntax&#xA;  &lt;a href=&#34;#syntax&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;A term is either:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Standard ML notes</title>
      <link>http://localhost:1313/section2/2019-12-30-standardml-notes/</link>
      <pubDate>Mon, 30 Dec 2019 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/section2/2019-12-30-standardml-notes/</guid>
      <description>&lt;h2 class=&#34;heading&#34; id=&#34;basics&#34;&gt;&#xA;  Basics&#xA;  &lt;a href=&#34;#basics&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;comments&#34;&gt;&#xA;  Comments&#xA;  &lt;a href=&#34;#comments&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(* SML comment *)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 class=&#34;heading&#34; id=&#34;variable-bindings-and-expressions&#34;&gt;&#xA;  Variable bindings and Expressions&#xA;  &lt;a href=&#34;#variable-bindings-and-expressions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;val x = 34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(* static environment: x : int *)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(* dynamic environment: x --&amp;gt; 34 *)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;val y = x + 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(* Use tilde character instead of minus to reprsent negation *)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;val z = ~1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(* Integer Division *)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;val w = y div x&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Strings:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(* `\n`のようなエスケープシーケンスが利用できる *)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;val x = &amp;#34;hello\n&amp;#34;; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(* 文字列の連結には&amp;#39;^&amp;#39;を使う *)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;val y = &amp;#34;hello &amp;#34; ^ &amp;#34;world&amp;#34;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An ML program is a sequence of bindings. Each binding gets &lt;strong&gt;type-checked&lt;/strong&gt; and then &lt;strong&gt;evaluated&lt;/strong&gt;.&#xA;What type a binding has depends on a static environment. How a binding is evaluated depends on a dynamic environment.&#xA;Sometimes we use just &lt;code&gt;environment&lt;/code&gt; to mean dynamic environment and use &lt;code&gt;context&lt;/code&gt; as a synonym for static environment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>uipath ノート（三）- uipath orchestrator</title>
      <link>http://localhost:1313/section2/2019-11-23-uipath-orchestrator/</link>
      <pubDate>Sat, 23 Nov 2019 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/section2/2019-11-23-uipath-orchestrator/</guid>
      <description>&lt;h2 class=&#34;heading&#34; id=&#34;利用手順&#34;&gt;&#xA;  利用手順&#xA;  &lt;a href=&#34;#%e5%88%a9%e7%94%a8%e6%89%8b%e9%a0%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Official doc: &lt;a href=&#34;https://docs.uipath.com/robot/docs/from-orchestrator-and-the-orchestrator-settings-window&#34;&gt;https://docs.uipath.com/robot/docs/from-orchestrator-and-the-orchestrator-settings-window&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;マシンを追加&#34;&gt;&#xA;  マシンを追加&#xA;  &lt;a href=&#34;#%e3%83%9e%e3%82%b7%e3%83%b3%e3%82%92%e8%bf%bd%e5%8a%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;マシン側でマシン名とユーザ名を確認&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C:\Users\user&amp;gt;hostname&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DESKTOP-ABCDE5F&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C:\Users\user&amp;gt;whoami&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;desktop-abcde5f\user&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C:\Users\user&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;追加完了後、マシンキーを取得する。&lt;/p&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;ロボットを登録&#34;&gt;&#xA;  ロボットを登録&#xA;  &lt;a href=&#34;#%e3%83%ad%e3%83%9c%e3%83%83%e3%83%88%e3%82%92%e7%99%bb%e9%8c%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Type: studio (開発用？)&lt;/li&gt;&#xA;&lt;li&gt;Domain/Username: 上記のユーザ名&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;ローカルのorchestrator設定&#34;&gt;&#xA;  ローカルのorchestrator設定&#xA;  &lt;a href=&#34;#%e3%83%ad%e3%83%bc%e3%82%ab%e3%83%ab%e3%81%aeorchestrator%e8%a8%ad%e5%ae%9a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Uipath Robotを開き⇒orchestratorの設定で、上記のマシンキーを入力する。&#xA;orchestrator URLに &lt;code&gt;https://platform.uipath.com/&lt;/code&gt; を入力する.&#xA;&lt;code&gt;Invalid machine key&lt;/code&gt;というエラーが出たら、下記のようなURLを試す：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;https://platform.uipath.com/&amp;lt;account name&amp;gt;/&amp;lt;service name&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参照：&lt;a href=&#34;https://forum.uipath.com/t/uipath-orchestrator-error-invalid-machine-key/153438/16&#34;&gt;Uipath orchestrator error : invalid machine key&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;ロボットグループenvironment作成&#34;&gt;&#xA;  ロボットグループ(Environment)作成&#xA;  &lt;a href=&#34;#%e3%83%ad%e3%83%9c%e3%83%83%e3%83%88%e3%82%b0%e3%83%ab%e3%83%bc%e3%83%97environment%e4%bd%9c%e6%88%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;プロジェクトをパブリッシュpublish&#34;&gt;&#xA;  プロジェクトをパブリッシュ(Publish)&#xA;  &lt;a href=&#34;#%e3%83%97%e3%83%ad%e3%82%b8%e3%82%a7%e3%82%af%e3%83%88%e3%82%92%e3%83%91%e3%83%96%e3%83%aa%e3%83%83%e3%82%b7%e3%83%a5publish&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;プロセスを追加&#34;&gt;&#xA;  プロセスを追加&#xA;  &lt;a href=&#34;#%e3%83%97%e3%83%ad%e3%82%bb%e3%82%b9%e3%82%92%e8%bf%bd%e5%8a%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Automations　⇒　Processes&lt;/p&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;ジョブjobsの実行&#34;&gt;&#xA;  ジョブ(Jobs)の実行&#xA;  &lt;a href=&#34;#%e3%82%b8%e3%83%a7%e3%83%96jobs%e3%81%ae%e5%ae%9f%e8%a1%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Monitoring　⇒　Jobs&lt;/p&gt;&#xA;&lt;h2 class=&#34;heading&#34; id=&#34;その他&#34;&gt;&#xA;  その他&#xA;  &lt;a href=&#34;#%e3%81%9d%e3%81%ae%e4%bb%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;再パブリッシュするとprocessが最新バージョンを使うため変更作業が必要&#34;&gt;&#xA;  再パブリッシュすると、Processが最新バージョンを使うため、変更作業が必要&#xA;  &lt;a href=&#34;#%e5%86%8d%e3%83%91%e3%83%96%e3%83%aa%e3%83%83%e3%82%b7%e3%83%a5%e3%81%99%e3%82%8b%e3%81%a8process%e3%81%8c%e6%9c%80%e6%96%b0%e3%83%90%e3%83%bc%e3%82%b8%e3%83%a7%e3%83%b3%e3%82%92%e4%bd%bf%e3%81%86%e3%81%9f%e3%82%81%e5%a4%89%e6%9b%b4%e4%bd%9c%e6%a5%ad%e3%81%8c%e5%bf%85%e8%a6%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Processes　⇒　More Options　⇒　View Process　⇒　最新のバージョンに切り替える&lt;/p&gt;</description>
    </item>
    <item>
      <title>uipath ノート（二）- Best Practice</title>
      <link>http://localhost:1313/section2/2019-11-18-uipath-best-practice/</link>
      <pubDate>Mon, 18 Nov 2019 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/section2/2019-11-18-uipath-best-practice/</guid>
      <description>&lt;h2 class=&#34;heading&#34; id=&#34;時間をかけて各ワークフローに適したレイアウトを選択しましょう&#34;&gt;&#xA;  時間をかけて各ワークフローに適したレイアウトを選択しましょう。&#xA;  &lt;a href=&#34;#%e6%99%82%e9%96%93%e3%82%92%e3%81%8b%e3%81%91%e3%81%a6%e5%90%84%e3%83%af%e3%83%bc%e3%82%af%e3%83%95%e3%83%ad%e3%83%bc%e3%81%ab%e9%81%a9%e3%81%97%e3%81%9f%e3%83%ac%e3%82%a4%e3%82%a2%e3%82%a6%e3%83%88%e3%82%92%e9%81%b8%e6%8a%9e%e3%81%97%e3%81%be%e3%81%97%e3%82%87%e3%81%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;メイン: フローチャートまたはステートマシン&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;ビジネスロジック: フローチャート&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;UI インタラクション: シーケンス&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;フローチャートを使用することで、入れ子状の IF を回避&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 class=&#34;heading&#34; id=&#34;プロセスを小さなワークフローに分割しましょう&#34;&gt;&#xA;  プロセスを小さなワークフローに分割しましょう。&#xA;  &lt;a href=&#34;#%e3%83%97%e3%83%ad%e3%82%bb%e3%82%b9%e3%82%92%e5%b0%8f%e3%81%95%e3%81%aa%e3%83%af%e3%83%bc%e3%82%af%e3%83%95%e3%83%ad%e3%83%bc%e3%81%ab%e5%88%86%e5%89%b2%e3%81%97%e3%81%be%e3%81%97%e3%82%87%e3%81%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;分割したものを個別に開発、テスト&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;ワークフローの再利用&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;分割ファイルで作業することによる、より効率的な共同作業&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 class=&#34;heading&#34; id=&#34;必ず例外を処理しましょう&#34;&gt;&#xA;  必ず例外を処理しましょう。&#xA;  &lt;a href=&#34;#%e5%bf%85%e3%81%9a%e4%be%8b%e5%a4%96%e3%82%92%e5%87%a6%e7%90%86%e3%81%97%e3%81%be%e3%81%97%e3%82%87%e3%81%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;例外が発生しやすいワークフローを [Try Catch (トライキャッチ)] ブロックに配置&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;外部から呼び出されたワークフローでも同様&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;リカバリシーケンスの設定&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 class=&#34;heading&#34; id=&#34;ワークフローを読みやすいものにしましょう&#34;&gt;&#xA;  ワークフローを読みやすいものにしましょう。&#xA;  &lt;a href=&#34;#%e3%83%af%e3%83%bc%e3%82%af%e3%83%95%e3%83%ad%e3%83%bc%e3%82%92%e8%aa%ad%e3%81%bf%e3%82%84%e3%81%99%e3%81%84%e3%82%82%e3%81%ae%e3%81%ab%e3%81%97%e3%81%be%e3%81%97%e3%82%87%e3%81%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;すべてのコンポーネントにわかりやすい名前を選択&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;注記やコメントの使用&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;リアルタイムの実行状況のログ取得&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;環境設定を Config ファイルに格納&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 class=&#34;heading&#34; id=&#34;不要になったアプリケーションを終了させることで常にクリーンな状態を維持しましょう&#34;&gt;&#xA;  不要になったアプリケーションを終了させることで、常にクリーンな状態を維持しましょう。&#xA;  &lt;a href=&#34;#%e4%b8%8d%e8%a6%81%e3%81%ab%e3%81%aa%e3%81%a3%e3%81%9f%e3%82%a2%e3%83%97%e3%83%aa%e3%82%b1%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e3%82%92%e7%b5%82%e4%ba%86%e3%81%95%e3%81%9b%e3%82%8b%e3%81%93%e3%81%a8%e3%81%a7%e5%b8%b8%e3%81%ab%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%81%aa%e7%8a%b6%e6%85%8b%e3%82%92%e7%b6%ad%e6%8c%81%e3%81%97%e3%81%be%e3%81%97%e3%82%87%e3%81%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;</description>
    </item>
    <item>
      <title>JavaScript URI エンコーディング</title>
      <link>http://localhost:1313/section2/2019-11-10-encodeuricomponent/</link>
      <pubDate>Sun, 10 Nov 2019 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/section2/2019-11-10-encodeuricomponent/</guid>
      <description>&lt;h2 class=&#34;heading&#34; id=&#34;まとめ&#34;&gt;&#xA;  まとめ&#xA;  &lt;a href=&#34;#%e3%81%be%e3%81%a8%e3%82%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;encodeURI()&lt;/code&gt;と&lt;code&gt;encodeURIComponent()&lt;/code&gt;はRFC 2396準拠である。&#xA;&lt;code&gt;encodeURI()&lt;/code&gt; は完全な URI を表すのに必要な文字 (Reserved Characters) はエンコードしません。&#xA;また、予約されていないが &amp;ldquo;そのまま&amp;rdquo; URI に使用できる(Unreserved Marks) 文字をエンコードしません。&#xA;&lt;code&gt;encodeURIComponent()&lt;/code&gt; は &amp;ldquo;Unreserved Marks&amp;rdquo; 文字をエンコードしません。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;var&lt;/span&gt; set1 &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;;,/?:@&amp;amp;=+$#&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#78787e&#34;&gt;// Reserved Characters&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;var&lt;/span&gt; set2 &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;-_.!~*&amp;#39;()&amp;#34;&lt;/span&gt;;   &lt;span style=&#34;color:#78787e&#34;&gt;// Unreserved Marks&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console.log(&lt;span style=&#34;color:#ff5c57&#34;&gt;encodeURI&lt;/span&gt;(set1)); &lt;span style=&#34;color:#78787e&#34;&gt;// ;,/?:@&amp;amp;=+$&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;console.log(&lt;span style=&#34;color:#ff5c57&#34;&gt;encodeURI&lt;/span&gt;(set2)); &lt;span style=&#34;color:#78787e&#34;&gt;// -_.!~*&amp;#39;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console.log(&lt;span style=&#34;color:#ff5c57&#34;&gt;encodeURIComponent&lt;/span&gt;(set1)); &lt;span style=&#34;color:#78787e&#34;&gt;// %3B%2C%2F%3F%3A%40%26%3D%2B%24&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;console.log(&lt;span style=&#34;color:#ff5c57&#34;&gt;encodeURIComponent&lt;/span&gt;(set2)); &lt;span style=&#34;color:#78787e&#34;&gt;// -_.!~*&amp;#39;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 class=&#34;heading&#34; id=&#34;rfc2396-appendix-a&#34;&gt;&#xA;  rfc2396 appendix-A&#xA;  &lt;a href=&#34;#rfc2396-appendix-a&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2396#appendix-A&#34;&gt;https://tools.ietf.org/html/rfc2396#appendix-A&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;URI-reference = [ absoluteURI | relativeURI ] [ &amp;#34;#&amp;#34; fragment ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      absoluteURI   = scheme &amp;#34;:&amp;#34; ( hier_part | opaque_part )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      relativeURI   = ( net_path | abs_path | rel_path ) [ &amp;#34;?&amp;#34; query ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      hier_part     = ( net_path | abs_path ) [ &amp;#34;?&amp;#34; query ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      opaque_part   = uric_no_slash *uric&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      uric_no_slash = unreserved | escaped | &amp;#34;;&amp;#34; | &amp;#34;?&amp;#34; | &amp;#34;:&amp;#34; | &amp;#34;@&amp;#34; |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &amp;#34;&amp;amp;&amp;#34; | &amp;#34;=&amp;#34; | &amp;#34;+&amp;#34; | &amp;#34;$&amp;#34; | &amp;#34;,&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      net_path      = &amp;#34;//&amp;#34; authority [ abs_path ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      abs_path      = &amp;#34;/&amp;#34;  path_segments&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      rel_path      = rel_segment [ abs_path ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      rel_segment   = 1*( unreserved | escaped |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &amp;#34;;&amp;#34; | &amp;#34;@&amp;#34; | &amp;#34;&amp;amp;&amp;#34; | &amp;#34;=&amp;#34; | &amp;#34;+&amp;#34; | &amp;#34;$&amp;#34; | &amp;#34;,&amp;#34; )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      scheme        = alpha *( alpha | digit | &amp;#34;+&amp;#34; | &amp;#34;-&amp;#34; | &amp;#34;.&amp;#34; )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      authority     = server | reg_name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      reg_name      = 1*( unreserved | escaped | &amp;#34;$&amp;#34; | &amp;#34;,&amp;#34; |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &amp;#34;;&amp;#34; | &amp;#34;:&amp;#34; | &amp;#34;@&amp;#34; | &amp;#34;&amp;amp;&amp;#34; | &amp;#34;=&amp;#34; | &amp;#34;+&amp;#34; )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      server        = [ [ userinfo &amp;#34;@&amp;#34; ] hostport ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      userinfo      = *( unreserved | escaped |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         &amp;#34;;&amp;#34; | &amp;#34;:&amp;#34; | &amp;#34;&amp;amp;&amp;#34; | &amp;#34;=&amp;#34; | &amp;#34;+&amp;#34; | &amp;#34;$&amp;#34; | &amp;#34;,&amp;#34; )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      hostport      = host [ &amp;#34;:&amp;#34; port ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      host          = hostname | IPv4address&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      hostname      = *( domainlabel &amp;#34;.&amp;#34; ) toplabel [ &amp;#34;.&amp;#34; ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      domainlabel   = alphanum | alphanum *( alphanum | &amp;#34;-&amp;#34; ) alphanum&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      toplabel      = alpha | alpha *( alphanum | &amp;#34;-&amp;#34; ) alphanum&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      IPv4address   = 1*digit &amp;#34;.&amp;#34; 1*digit &amp;#34;.&amp;#34; 1*digit &amp;#34;.&amp;#34; 1*digit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      port          = *digit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      path          = [ abs_path | opaque_part ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      path_segments = segment *( &amp;#34;/&amp;#34; segment )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      segment       = *pchar *( &amp;#34;;&amp;#34; param )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      param         = *pchar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pchar         = unreserved | escaped |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &amp;#34;:&amp;#34; | &amp;#34;@&amp;#34; | &amp;#34;&amp;amp;&amp;#34; | &amp;#34;=&amp;#34; | &amp;#34;+&amp;#34; | &amp;#34;$&amp;#34; | &amp;#34;,&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      query         = *uric&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      fragment      = *uric&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      uric          = reserved | unreserved | escaped&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      reserved      = &amp;#34;;&amp;#34; | &amp;#34;/&amp;#34; | &amp;#34;?&amp;#34; | &amp;#34;:&amp;#34; | &amp;#34;@&amp;#34; | &amp;#34;&amp;amp;&amp;#34; | &amp;#34;=&amp;#34; | &amp;#34;+&amp;#34; |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &amp;#34;$&amp;#34; | &amp;#34;,&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      unreserved    = alphanum | mark&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      mark          = &amp;#34;-&amp;#34; | &amp;#34;_&amp;#34; | &amp;#34;.&amp;#34; | &amp;#34;!&amp;#34; | &amp;#34;~&amp;#34; | &amp;#34;*&amp;#34; | &amp;#34;&amp;#39;&amp;#34; |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &amp;#34;(&amp;#34; | &amp;#34;)&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      escaped       = &amp;#34;%&amp;#34; hex hex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      hex           = digit | &amp;#34;A&amp;#34; | &amp;#34;B&amp;#34; | &amp;#34;C&amp;#34; | &amp;#34;D&amp;#34; | &amp;#34;E&amp;#34; | &amp;#34;F&amp;#34; |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              &amp;#34;a&amp;#34; | &amp;#34;b&amp;#34; | &amp;#34;c&amp;#34; | &amp;#34;d&amp;#34; | &amp;#34;e&amp;#34; | &amp;#34;f&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      alphanum      = alpha | digit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      alpha         = lowalpha | upalpha&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      lowalpha = &amp;#34;a&amp;#34; | &amp;#34;b&amp;#34; | &amp;#34;c&amp;#34; | &amp;#34;d&amp;#34; | &amp;#34;e&amp;#34; | &amp;#34;f&amp;#34; | &amp;#34;g&amp;#34; | &amp;#34;h&amp;#34; | &amp;#34;i&amp;#34; |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &amp;#34;j&amp;#34; | &amp;#34;k&amp;#34; | &amp;#34;l&amp;#34; | &amp;#34;m&amp;#34; | &amp;#34;n&amp;#34; | &amp;#34;o&amp;#34; | &amp;#34;p&amp;#34; | &amp;#34;q&amp;#34; | &amp;#34;r&amp;#34; |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &amp;#34;s&amp;#34; | &amp;#34;t&amp;#34; | &amp;#34;u&amp;#34; | &amp;#34;v&amp;#34; | &amp;#34;w&amp;#34; | &amp;#34;x&amp;#34; | &amp;#34;y&amp;#34; | &amp;#34;z&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      upalpha  = &amp;#34;A&amp;#34; | &amp;#34;B&amp;#34; | &amp;#34;C&amp;#34; | &amp;#34;D&amp;#34; | &amp;#34;E&amp;#34; | &amp;#34;F&amp;#34; | &amp;#34;G&amp;#34; | &amp;#34;H&amp;#34; | &amp;#34;I&amp;#34; |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &amp;#34;J&amp;#34; | &amp;#34;K&amp;#34; | &amp;#34;L&amp;#34; | &amp;#34;M&amp;#34; | &amp;#34;N&amp;#34; | &amp;#34;O&amp;#34; | &amp;#34;P&amp;#34; | &amp;#34;Q&amp;#34; | &amp;#34;R&amp;#34; |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &amp;#34;S&amp;#34; | &amp;#34;T&amp;#34; | &amp;#34;U&amp;#34; | &amp;#34;V&amp;#34; | &amp;#34;W&amp;#34; | &amp;#34;X&amp;#34; | &amp;#34;Y&amp;#34; | &amp;#34;Z&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      digit    = &amp;#34;0&amp;#34; | &amp;#34;1&amp;#34; | &amp;#34;2&amp;#34; | &amp;#34;3&amp;#34; | &amp;#34;4&amp;#34; | &amp;#34;5&amp;#34; | &amp;#34;6&amp;#34; | &amp;#34;7&amp;#34; |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &amp;#34;8&amp;#34; | &amp;#34;9&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 class=&#34;heading&#34; id=&#34;参考&#34;&gt;&#xA;  参考&#xA;  &lt;a href=&#34;#%e5%8f%82%e8%80%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent&#34;&gt;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>uipath ノート（一）</title>
      <link>http://localhost:1313/section2/2019-10-27-uipath/</link>
      <pubDate>Sun, 27 Oct 2019 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/section2/2019-10-27-uipath/</guid>
      <description>&lt;h2 class=&#34;heading&#34; id=&#34;変数&#34;&gt;&#xA;  変数&#xA;  &lt;a href=&#34;#%e5%a4%89%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Int32&lt;/li&gt;&#xA;&lt;li&gt;String&lt;/li&gt;&#xA;&lt;li&gt;Boolean&lt;/li&gt;&#xA;&lt;li&gt;GenericValue　&lt;a href=&#34;https://docs.uipath.com/studio/lang-ja/docs/genericvalue-variables&#34;&gt;参照&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;UiPath Studio には GenericValue 変数の自動変換メカニズムがあり、式を正しく定義することで、目的の結果を得ることができます。式の最初の要素は、Studio から操作するガイドラインとして使用されることを考慮してください。例えば、2 つの GenericValue 変数を追加し、式の最初の変数が String として定義されてた場合、最初に代入された値を元に 2 つの値を結合し、文字列となります。 Integer として定義した場合の結果は、合計の値となります。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Array&lt;/li&gt;&#xA;&lt;li&gt;DataTime&lt;/li&gt;&#xA;&lt;li&gt;DataTable&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.uipath.com/studio/lang-ja/docs/managing-variables#section-browsing-for-net-variable-types&#34;&gt;.Net 変数型を参照して探す方法&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 class=&#34;heading&#34; id=&#34;アクティビティ&#34;&gt;&#xA;  アクティビティ&#xA;  &lt;a href=&#34;#%e3%82%a2%e3%82%af%e3%83%86%e3%82%a3%e3%83%93%e3%83%86%e3%82%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;レイアウトダイアグラム&#34;&gt;&#xA;  レイアウトダイアグラム&#xA;  &lt;a href=&#34;#%e3%83%ac%e3%82%a4%e3%82%a2%e3%82%a6%e3%83%88%e3%83%80%e3%82%a4%e3%82%a2%e3%82%b0%e3%83%a9%e3%83%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;シーエンス：　より高度で複雑な自動化に向こう&lt;/li&gt;&#xA;&lt;li&gt;フローチャート：　シンプルな自動化プロジェクトに適している&lt;/li&gt;&#xA;&lt;li&gt;ステートマシン&lt;/li&gt;&#xA;&lt;li&gt;Global Exception Handler (グローバル例外ハンドラー)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;参照：&lt;a href=&#34;https://docs.uipath.com/studio/lang-ja/docs/workflow-design&#34;&gt;https://docs.uipath.com/studio/lang-ja/docs/workflow-design&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;選択肢&#34;&gt;&#xA;  選択肢&#xA;  &lt;a href=&#34;#%e9%81%b8%e6%8a%9e%e8%82%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;条件分岐(If)：　シーケンス用条件分岐&lt;/li&gt;&#xA;&lt;li&gt;フロー条件分岐(flow desicion)：　フローチャート用条件分岐&lt;/li&gt;&#xA;&lt;li&gt;フロースイッチ (Flow Switch)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;繰り返し&#34;&gt;&#xA;  繰り返し&#xA;  &lt;a href=&#34;#%e7%b9%b0%e3%82%8a%e8%bf%94%e3%81%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;繰り返し（前判定）(While)&lt;/li&gt;&#xA;&lt;li&gt;繰り返し（後判定）(Do While)&lt;/li&gt;&#xA;&lt;li&gt;繰り返し（コレクションの各要素）(For Each)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;データ操作&#34;&gt;&#xA;  データ操作&#xA;  &lt;a href=&#34;#%e3%83%87%e3%83%bc%e3%82%bf%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CSVを読み込み(Read CSV)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;オプションにエンコーディングを指定できる（日本語データがある場合、&lt;code&gt;&amp;quot;SHIFT-JIS&amp;quot;&lt;/code&gt;を指定する）&lt;/li&gt;&#xA;&lt;li&gt;列名を含める(IncludeColumnNames)を指定できる&lt;/li&gt;&#xA;&lt;li&gt;出力タイプ：&lt;code&gt;System.Data.DataTable&lt;/code&gt; &lt;a href=&#34;https://docs.microsoft.com/ja-jp/dotnet/api/system.data.datatable?view=netframework-4.8&#34;&gt;Microsoft Docs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Select&lt;/code&gt;メソッドで半角スペースを含む列名で指定する場合、半角スペースが特殊文字ではなく文字列として認識されるため、&lt;code&gt;[]&lt;/code&gt;で列名を囲う&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Names.Select(&amp;#34;[メンバー ステータス] = &amp;#39;Yes&amp;#39;&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 class=&#34;heading&#34; id=&#34;その他&#34;&gt;&#xA;  その他&#xA;  &lt;a href=&#34;#%e3%81%9d%e3%81%ae%e4%bb%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;メッセージボックス&lt;/li&gt;&#xA;&lt;li&gt;代入(assign)&lt;/li&gt;&#xA;&lt;li&gt;待機 (Delay)&lt;/li&gt;&#xA;&lt;li&gt;入力ダイアログ（input dialog）:&lt;/li&gt;&#xA;&lt;li&gt;フォルダーを選択(Select Folder)&lt;/li&gt;&#xA;&lt;li&gt;一行を書き込み(Write Line)：　Debug用？&lt;/li&gt;&#xA;&lt;li&gt;アプリケーションを開く(Open Application)&lt;/li&gt;&#xA;&lt;li&gt;ブラウザを開く(Open Browser)&lt;/li&gt;&#xA;&lt;li&gt;ブラウザーにアタッチ(Attach Browser)&lt;/li&gt;&#xA;&lt;li&gt;文字を入力(Type Into)&lt;/li&gt;&#xA;&lt;li&gt;ハイライト(Highlight)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E3%82%A2%E3%83%B3%E3%82%AB%E3%83%BC%E3%83%99%E3%83%BC%E3%82%B9-Anchor-Base&#34;&gt;アンカーベース(Anchor Base)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;スクリーンショットをと撮る(Take Screenshot)&lt;/li&gt;&#xA;&lt;li&gt;要素の有無を検出(Element Exists)&lt;/li&gt;&#xA;&lt;li&gt;要素の消滅を待つ(Wait Element Vanish)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 class=&#34;heading&#34; id=&#34;レコーディング機能&#34;&gt;&#xA;  レコーディング機能&#xA;  &lt;a href=&#34;#%e3%83%ac%e3%82%b3%e3%83%bc%e3%83%87%e3%82%a3%e3%83%b3%e3%82%b0%e6%a9%9f%e8%83%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;[○]レコーディング可&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript Comparison operation at a glance</title>
      <link>http://localhost:1313/section1/2019-03-28-javascript-comparison/</link>
      <pubDate>Thu, 28 Mar 2019 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/section1/2019-03-28-javascript-comparison/</guid>
      <description>&lt;p&gt;When given a scenario like:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console.log(&lt;span style=&#34;color:#ff6ac1&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#78787e&#34;&gt;//true&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It produces &lt;code&gt;true&lt;/code&gt;, which makes me think &lt;code&gt;null&lt;/code&gt; is treated as &lt;code&gt;0&lt;/code&gt;. But when I run:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console.log(&lt;span style=&#34;color:#ff6ac1&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#78787e&#34;&gt;// false&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;console.log(&lt;span style=&#34;color:#ff6ac1&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#78787e&#34;&gt;// false&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;console.log(&lt;span style=&#34;color:#ff6ac1&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#78787e&#34;&gt;// false&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;They all output &lt;code&gt;false&lt;/code&gt;!&lt;/p&gt;&#xA;&lt;p&gt;I googled a lot and finally found answers in &lt;a href=&#34;http://www.ecma-international.org/ecma-262/8.0/#sec-abstract-equality-comparison&#34;&gt;Ecma-262 Specification&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The comparison &lt;code&gt;x == y&lt;/code&gt;, where x and y are values, produces true or false. Such a comparison is performed as follows:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1. If Type(x) is the same as Type(y), then return the result of performing Strict Equality Comparison x === y.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. If x is null and y is undefined, return true.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3. If x is undefined and y is null, return true.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4. If Type(x) is Number and Type(y) is String, return the result of the comparison x == ToNumber(y).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5. If Type(x) is String and Type(y) is Number, return the result of the comparison ToNumber(x) == y.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;6. If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7. If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;8. If Type(x) is either String, Number, or Symbol and Type(y) is Object, return the result of the comparison x == ToPrimitive(y).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;9. If Type(x) is Object and Type(y) is either String, Number, or Symbol, return the result of the comparison ToPrimitive(x) == y.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10. Return false.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Relational comparison is much more complex so I&amp;rsquo;m not copying that section. Read at the &lt;a href=&#34;http://www.ecma-international.org/ecma-262/8.0/#sec-abstract-relational-comparison&#34;&gt;spec website&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Js tips I can&#39;t remember</title>
      <link>http://localhost:1313/section1/2019-03-22-js-tips/</link>
      <pubDate>Fri, 22 Mar 2019 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/section1/2019-03-22-js-tips/</guid>
      <description>&lt;h2 class=&#34;heading&#34; id=&#34;__proto__-vs-prototype&#34;&gt;&#xA;  &lt;code&gt;__proto__&lt;/code&gt; VS &lt;code&gt;prototype&lt;/code&gt;&#xA;  &lt;a href=&#34;#__proto__-vs-prototype&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;__proto__&lt;/code&gt; is the actual object that is used in the lookup chain to resolve methods and others. &lt;code&gt;prototype&lt;/code&gt; is the object that is used to build &lt;code&gt;__proto__&lt;/code&gt; when creating an object with &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The &amp;ldquo;cool kids&amp;rdquo; in JavaScript would generally pronounce &lt;code&gt;__proto__&lt;/code&gt; as &amp;ldquo;&lt;strong&gt;dunder proto&lt;/strong&gt;&amp;rdquo;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript&#34;&gt;https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;( &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; Foo ).__proto__ &lt;span style=&#34;color:#ff6ac1&#34;&gt;===&lt;/span&gt; Foo.prototype; &lt;span style=&#34;color:#78787e&#34;&gt;// true&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;( &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; Foo ).prototype &lt;span style=&#34;color:#ff6ac1&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;undefined&lt;/span&gt;; &lt;span style=&#34;color:#78787e&#34;&gt;// true&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Bind specific arguments of a function</title>
      <link>http://localhost:1313/section1/2019-03-08-es6-bind-trick/</link>
      <pubDate>Fri, 08 Mar 2019 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/section1/2019-03-08-es6-bind-trick/</guid>
      <description>&lt;p&gt;To bind specific (nth) arguments of a function, we can write a decorator instead of using &lt;code&gt;Function.bind()&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;function&lt;/span&gt; func(p1, p2, p3) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log(p1, p2, p3);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// the binding starts after however many are passed in.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;function&lt;/span&gt; decorator(...bound_args) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;function&lt;/span&gt;(...args) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; func(...args, ...bound_args);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// bind the last parameter&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;let&lt;/span&gt; f &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; decorator(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;);  &lt;span style=&#34;color:#78787e&#34;&gt;// a b 3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// bind the last two parameter&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;let&lt;/span&gt; f2 &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; decorator(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f2(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;);  &lt;span style=&#34;color:#78787e&#34;&gt;// a 2 3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Even if we want to bind just the nth argument, we can do as follows:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Object.assign() with accessor descriptor</title>
      <link>http://localhost:1313/section1/2019-03-08-object-assign-with-accessor-descriptor/</link>
      <pubDate>Fri, 08 Mar 2019 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/section1/2019-03-08-object-assign-with-accessor-descriptor/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Copying_accessors&#34;&gt;MDN docs:&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The Object.assign() method only copies enumerable and own properties from a source object to a target object. It uses [[Get]] on the source and [[Set]] on the target, so it will invoke getters and setters. Therefore it assigns properties versus just copying or defining new properties. This may make it unsuitable for merging new properties into a prototype if the merge sources contain getters.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;For example&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;class&lt;/span&gt; Cat {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(name) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;this&lt;/span&gt;._name &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    get name() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;this&lt;/span&gt;._name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    set name(value) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;this&lt;/span&gt;._name &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;let&lt;/span&gt; nyannko &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; Cat(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;nyannko&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;let&lt;/span&gt; copy &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;Object&lt;/span&gt;.assign({}, nyannko)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console.log(nyannko.name) &lt;span style=&#34;color:#78787e&#34;&gt;// nyannko&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;console.log(copy.name) &lt;span style=&#34;color:#78787e&#34;&gt;// undefined&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; property is lost.&lt;/p&gt;</description>
    </item>
    <item>
      <title>VueのNavigation Guards</title>
      <link>http://localhost:1313/section1/2019-01-19-vue-navigation-guards/</link>
      <pubDate>Fri, 25 Jan 2019 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/section1/2019-01-19-vue-navigation-guards/</guid>
      <description>&lt;p&gt;Navigation guards are provided by &lt;code&gt;vue-router&lt;/code&gt;.&#xA;Three ways to hook:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;globally&lt;/li&gt;&#xA;&lt;li&gt;per-route&lt;/li&gt;&#xA;&lt;li&gt;in-component&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Params or query changes won&amp;rsquo;t trigger enter/leave navigation guards. You can either watch the &lt;code&gt;$route&lt;/code&gt; object to react to those changes, or use the &lt;code&gt;beforeRouteUpdate&lt;/code&gt; in-component guard.&lt;/li&gt;&#xA;&lt;li&gt;Make sure to always call the next function, otherwise the hook will never be resolved.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 class=&#34;heading&#34; id=&#34;global&#34;&gt;&#xA;  Global&#xA;  &lt;a href=&#34;#global&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Javascript&#34; data-lang=&#34;Javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; router &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; VueRouter({ ... })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// Before Guards&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;router.beforeEach((to, from, next) =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#78787e&#34;&gt;// ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// Resolve Guards&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// beforeResolve guards will be called right before the navigation is confirmed&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// after all in-component guards and async route components are resolved&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;router.beforeResolve((to, from, next) =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#78787e&#34;&gt;// ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// After Hooks&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;router.afterEach((to, from) =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#78787e&#34;&gt;// ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 class=&#34;heading&#34; id=&#34;pre-reoute&#34;&gt;&#xA;  Pre-reoute&#xA;  &lt;a href=&#34;#pre-reoute&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Javascript&#34; data-lang=&#34;Javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; router &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; VueRouter({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  routes&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      path&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;/foo&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      component&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; Foo,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      beforeEnter&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; (to, from, next) =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#78787e&#34;&gt;// ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 class=&#34;heading&#34; id=&#34;in-component&#34;&gt;&#xA;  In-component&#xA;  &lt;a href=&#34;#in-component&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Javascript&#34; data-lang=&#34;Javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; Foo &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  template&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;`...`&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  beforeRouteEnter (to, from, next) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// called before the route that renders this component is confirmed.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// does NOT have access to `this` component instance,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// because it has not been created yet when this guard is called!&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// However, you can access the instance by passing a callback to next. &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// The callback will be called when the navigation is confirmed&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// and the component instance will be passed to the callback as the argument&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    beforeRouteEnter (to, from, next) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      next(vm =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#78787e&#34;&gt;// access to component instance via `vm`&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;      })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  beforeRouteUpdate (to, from, next) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// called when the route that renders this component has changed,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// but this component is reused in the new route.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// For example, for a route with dynamic params `/foo/:id`, when we&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// navigate between `/foo/1` and `/foo/2`, the same `Foo` component instance&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// will be reused, and this hook will be called when that happens.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// has access to `this` component instance.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;  },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  beforeRouteLeave (to, from, next) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// called when the route that renders this component is about to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// be navigated away from.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;// has access to `this` component instance.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 class=&#34;heading&#34; id=&#34;resolve-flow&#34;&gt;&#xA;  Resolve flow&#xA;  &lt;a href=&#34;#resolve-flow&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Navigation triggered.&lt;/li&gt;&#xA;&lt;li&gt;Call leave guards in deactivated components.&lt;/li&gt;&#xA;&lt;li&gt;Call global beforeEach guards.&lt;/li&gt;&#xA;&lt;li&gt;Call beforeRouteUpdate guards in reused components.&lt;/li&gt;&#xA;&lt;li&gt;Call beforeEnter in route configs.&lt;/li&gt;&#xA;&lt;li&gt;Resolve async route components.&lt;/li&gt;&#xA;&lt;li&gt;Call beforeRouteEnter in activated components.&lt;/li&gt;&#xA;&lt;li&gt;Call global beforeResolve guards.&lt;/li&gt;&#xA;&lt;li&gt;Navigation confirmed.&lt;/li&gt;&#xA;&lt;li&gt;Call global afterEach hooks.&lt;/li&gt;&#xA;&lt;li&gt;DOM updates triggered.&lt;/li&gt;&#xA;&lt;li&gt;Call callbacks passed to next in beforeRouteEnter guards with instantiated instances.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>ES6について</title>
      <link>http://localhost:1313/section1/2019-01-18-es6/</link>
      <pubDate>Fri, 18 Jan 2019 16:00:00 +0000</pubDate>
      <guid>http://localhost:1313/section1/2019-01-18-es6/</guid>
      <description>&lt;h2 class=&#34;heading&#34; id=&#34;overview&#34;&gt;&#xA;  Overview&#xA;  &lt;a href=&#34;#overview&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lukehoban/es6features#readme&#34;&gt;https://github.com/lukehoban/es6features#readme&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://help.wtf/es6&#34;&gt;http://help.wtf/es6&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://es6-features.org&#34;&gt;http://es6-features.org&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 class=&#34;heading&#34; id=&#34;string&#34;&gt;&#xA;  String&#xA;  &lt;a href=&#34;#string&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;stringx-is-deprecated-use-stringprototypex-instead&#34;&gt;&#xA;  String.x is deprecated; use String.prototype.x instead.&#xA;  &lt;a href=&#34;#stringx-is-deprecated-use-stringprototypex-instead&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;非推奨の構文:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Javascript&#34; data-lang=&#34;Javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;var&lt;/span&gt; num &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;15&lt;/span&gt;; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;String&lt;/span&gt;.replace(num, &lt;span style=&#34;color:#5af78e&#34;&gt;/5/&lt;/span&gt;, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;標準の構文:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Javascript&#34; data-lang=&#34;Javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;var&lt;/span&gt; num &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;15&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;String&lt;/span&gt;(num).replace(&lt;span style=&#34;color:#5af78e&#34;&gt;/5/&lt;/span&gt;, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 class=&#34;heading&#34; id=&#34;template-literal&#34;&gt;&#xA;  Template literal&#xA;  &lt;a href=&#34;#template-literal&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Nesting templates:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Javascript&#34; data-lang=&#34;Javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; classes &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;`header &lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;${&lt;/span&gt; isLargeScreen() &lt;span style=&#34;color:#ff6ac1&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;`icon-&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;${&lt;/span&gt;item.isCollapsed &lt;span style=&#34;color:#ff6ac1&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;expander&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;collapser&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;`&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>java散列知识点总结</title>
      <link>http://localhost:1313/section1/2017-02-18-hash/</link>
      <pubDate>Sat, 18 Feb 2017 19:19:01 +0000</pubDate>
      <guid>http://localhost:1313/section1/2017-02-18-hash/</guid>
      <description>&lt;p&gt;java 的根类 &lt;code&gt;Object&lt;/code&gt; 具有 &lt;code&gt;hashcode&lt;/code&gt; 方法。当 &lt;code&gt;equal&lt;/code&gt; 方法被重写时也应当重写 &lt;code&gt;hashcode&lt;/code&gt; 方法。&lt;/p&gt;&#xA;&lt;h2 class=&#34;heading&#34; id=&#34;基本数据类型的散列码&#34;&gt;&#xA;  基本数据类型的散列码&#xA;  &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e7%9a%84%e6%95%a3%e5%88%97%e7%a0%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;byte&lt;/code&gt; &lt;code&gt;short&lt;/code&gt; &lt;code&gt;int&lt;/code&gt; &lt;code&gt;char&lt;/code&gt; 类型的搜索键将会转换为 &lt;code&gt;int&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;float&lt;/code&gt; 类型的搜索键使用 &lt;code&gt;Float.floatToIntBits(key)&lt;/code&gt; 作为散列码。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;long&lt;/code&gt; 类型的搜索键会进行折叠操作，如下：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iny hashCode &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt;) (key &lt;span style=&#34;color:#ff6ac1&#34;&gt;^&lt;/span&gt; (key &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 32));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;double&lt;/code&gt; 类型的搜索键会使用 &lt;code&gt;Double.doubleToLongBits(key)&lt;/code&gt; 方法转换为 &lt;code&gt;long&lt;/code&gt; 类型然后再进行折叠。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 class=&#34;heading&#34; id=&#34;字符串类型的散列码&#34;&gt;&#xA;  字符串类型的散列码&#xA;  &lt;a href=&#34;#%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%b1%bb%e5%9e%8b%e7%9a%84%e6%95%a3%e5%88%97%e7%a0%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;对于字符串一般使用多项式散列码进行计算，&lt;/p&gt;&#xA;&lt;p&gt;&lt;del&gt;这里放个公式的图&lt;/del&gt;&lt;/p&gt;&#xA;&lt;p&gt;b的较好取值为31，33，37，39，41。在 java String 类中 &lt;code&gt;b&lt;/code&gt; 取31。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;hash&lt;/span&gt;(String key, &lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; tableSize)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; hashVal &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#9aedfe&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; 0; i &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;&lt;/span&gt; key.&lt;span style=&#34;color:#57c7ff&#34;&gt;length&lt;/span&gt;(); i&lt;span style=&#34;color:#ff6ac1&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        hashVal &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; 37&lt;span style=&#34;color:#ff6ac1&#34;&gt;*&lt;/span&gt;hashVal &lt;span style=&#34;color:#ff6ac1&#34;&gt;+&lt;/span&gt; key.&lt;span style=&#34;color:#57c7ff&#34;&gt;charAt&lt;/span&gt;(i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    hashVal &lt;span style=&#34;color:#ff6ac1&#34;&gt;%=&lt;/span&gt; tableSize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (hashVal &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;&lt;/span&gt; 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        hashVal &lt;span style=&#34;color:#ff6ac1&#34;&gt;+=&lt;/span&gt; tableSize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; hashVal;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 class=&#34;heading&#34; id=&#34;压缩散列码&#34;&gt;&#xA;  压缩散列码&#xA;  &lt;a href=&#34;#%e5%8e%8b%e7%bc%a9%e6%95%a3%e5%88%97%e7%a0%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;由于散列码可能是很大的正数，通常应该对其进行压缩以防止超出索引的范围。若索引范围为 &lt;code&gt;0 ~ n - 1&lt;/code&gt; ，通常的做法是 &lt;code&gt;h(hashCode) = hashCode % N&lt;/code&gt; ，选择N为大于2的素数。&#xA;&lt;code&gt;java.util.HashMap&lt;/code&gt; 的实现中，将N设置为2的幂值，这样可以使用位运算代替上述的取模：&lt;code&gt;h(hashCode) = hashCode &amp;amp; (N - 1)&lt;/code&gt; ，两者是完全等价的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>php的闭包特性</title>
      <link>http://localhost:1313/section1/2017-01-11-php-lambada/</link>
      <pubDate>Wed, 11 Jan 2017 18:39:17 +0000</pubDate>
      <guid>http://localhost:1313/section1/2017-01-11-php-lambada/</guid>
      <description>&lt;p&gt;闭包和匿名函数在&lt;code&gt;PHP 5.3.0&lt;/code&gt;引入，并且PHP将两者视为相同的概念。闭包其实是伪装成函数的对象，它的实质其实是&lt;code&gt;Closure&lt;/code&gt;实例。&lt;/p&gt;&#xA;&lt;p&gt;创建闭包非常简单：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;$c&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#ff5c57&#34;&gt;$name&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; sprintf(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;Hello World! Hello %s!&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff5c57&#34;&gt;$name&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;$c&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;PHP&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用&lt;code&gt;use&lt;/code&gt;对闭包附加状态，多个参数使用&lt;code&gt;,&lt;/code&gt;分隔：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;callPerson&lt;/span&gt;(&lt;span style=&#34;color:#ff5c57&#34;&gt;$name&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#ff5c57&#34;&gt;$about&lt;/span&gt;) &lt;span style=&#34;color:#ff6ac1&#34;&gt;use&lt;/span&gt; (&lt;span style=&#34;color:#ff5c57&#34;&gt;$name&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; sprintf(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;%s, %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff5c57&#34;&gt;$name&lt;/span&gt;, &lt;span style=&#34;color:#ff5c57&#34;&gt;$about&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;$triver&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; callPerson(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;Triver&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;$triver&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;slow down, please!!&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;附加的变量会被封装到闭包内，即使返回的闭包队形已经跳出了&lt;code&gt;callPerson()&lt;/code&gt;的作用域也仍然会记住&lt;code&gt;$name&lt;/code&gt;的值。&lt;/p&gt;&#xA;&lt;p&gt;闭包有一个有趣的&lt;code&gt;bindTo()&lt;/code&gt;方法，可以将闭包的内部状态绑定到其他对象上，第二个参数指定了绑定闭包的对象所属的类，从而实现在闭包中访问绑定对象的私有方法和属性。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f3f99d&#34;&gt;Bind&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;$name&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;no name&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;$change&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;addAction&lt;/span&gt;(&lt;span style=&#34;color:#ff5c57&#34;&gt;$action&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff5c57&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;change&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;$action&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;bindTo&lt;/span&gt;(&lt;span style=&#34;color:#ff5c57&#34;&gt;$this&lt;/span&gt;, &lt;span style=&#34;color:#ff9f43&#34;&gt;__CLASS__&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;$bind&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; Bind();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;$bind&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;addAction&lt;/span&gt;(&lt;span style=&#34;color:#ff6ac1&#34;&gt;function&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;php&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;name&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;$change&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;$bind&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;change&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;$change&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用这个特性可以方便的为类添加方法并绑定：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;trait&lt;/span&gt; MetaTrait&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;//定义$methods数组,用于保存方法（函数）的名字和地址。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;$methods&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;array&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;//定义addMethod方法，使用闭包类绑定匿名函数。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;addMethod&lt;/span&gt;(&lt;span style=&#34;color:#ff5c57&#34;&gt;$methodName&lt;/span&gt;, &lt;span style=&#34;color:#ff5c57&#34;&gt;$methodCallable&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff6ac1&#34;&gt;!&lt;/span&gt;is_callable(&lt;span style=&#34;color:#ff5c57&#34;&gt;$methodCallable&lt;/span&gt;)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff6ac1&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; InvalidArgumentException(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;Second param must be callable&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff5c57&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;methods&lt;/span&gt;[&lt;span style=&#34;color:#ff5c57&#34;&gt;$methodName&lt;/span&gt;] &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; Closure&lt;span style=&#34;color:#ff6ac1&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#ff5c57&#34;&gt;$methodCallable&lt;/span&gt;, &lt;span style=&#34;color:#ff5c57&#34;&gt;$this&lt;/span&gt;, get_class());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;//方法重载。为了避免当调用的方法不存在时产生错误，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;//可以使用 __call() 方法来避免。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;function&lt;/span&gt; __call(&lt;span style=&#34;color:#ff5c57&#34;&gt;$methodName&lt;/span&gt;, &lt;span style=&#34;color:#ff6ac1&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;$args&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (isset(&lt;span style=&#34;color:#ff5c57&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;methods&lt;/span&gt;[&lt;span style=&#34;color:#ff5c57&#34;&gt;$methodName&lt;/span&gt;])) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; call_user_func_array(&lt;span style=&#34;color:#ff5c57&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;methods&lt;/span&gt;[&lt;span style=&#34;color:#ff5c57&#34;&gt;$methodName&lt;/span&gt;], &lt;span style=&#34;color:#ff5c57&#34;&gt;$args&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;throw&lt;/span&gt; RunTimeException(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;There is no method with the given name to call&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f3f99d&#34;&gt;HackThursday&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;use&lt;/span&gt; MetaTrait;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;$dayOfWeek&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;Thursday&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;$test&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;new&lt;/span&gt; HackThursday();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;$test&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;addMethod&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;when&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ff6ac1&#34;&gt;function&lt;/span&gt; () {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;dayOfWeek&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;$test&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;when&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;php7 中增加了 &lt;code&gt;Closure::call()&lt;/code&gt; 方法，可以更高效的绑定对象作用域并调用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ruby学习笔记</title>
      <link>http://localhost:1313/section1/2016-12-08-ruby-notes/</link>
      <pubDate>Thu, 08 Dec 2016 22:54:49 +0000</pubDate>
      <guid>http://localhost:1313/section1/2016-12-08-ruby-notes/</guid>
      <description>&lt;h2 class=&#34;heading&#34; id=&#34;regular-expressions&#34;&gt;&#xA;  regular expressions&#xA;  &lt;a href=&#34;#regular-expressions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;=~&lt;/code&gt;是用于正则表达式的匹配操作符。返回匹配到的字符串位置或nil。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;abcdef&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;/d/&lt;/span&gt; &lt;span style=&#34;color:#78787e&#34;&gt;# return 3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;aaaaaa&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;/d/&lt;/span&gt; &lt;span style=&#34;color:#78787e&#34;&gt;# return nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 class=&#34;heading&#34; id=&#34;和&#34;&gt;&#xA;  !和?&#xA;  &lt;a href=&#34;#%e5%92%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The exclamation point (!, sometimes pronounced aloud as &amp;ldquo;bang!&amp;rdquo;) indicates something potentially destructive, that is to say, something that can change the value of what it touches.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ruby&amp;gt; s1 = &amp;#34;forth&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;forth&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ruby&amp;gt; s1.chop!       # This changes s1.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;fort&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ruby&amp;gt; s2 = s1.chop   # This puts a changed copy in s2,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;for&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ruby&amp;gt; s1             # ... without disturbing s1.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;fort&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You&amp;rsquo;ll also sometimes see chomp and chomp! used. These are more selective: the end of a string gets bit off only if it happens to be a newline.&lt;/p&gt;</description>
    </item>
    <item>
      <title>netfilter/iptables 笔记</title>
      <link>http://localhost:1313/section1/2016-11-29-iptables-usage/</link>
      <pubDate>Tue, 29 Nov 2016 21:08:52 +0000</pubDate>
      <guid>http://localhost:1313/section1/2016-11-29-iptables-usage/</guid>
      <description>&lt;h2 class=&#34;heading&#34; id=&#34;netfilter-与-iptables&#34;&gt;&#xA;  netfilter 与 iptables&#xA;  &lt;a href=&#34;#netfilter-%e4%b8%8e-iptables&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;netfilter&lt;/code&gt;是linux默认的防火墙，在2.4之后的版本正式进入内核。&lt;code&gt;netfilter&lt;/code&gt; 使用四个表(Table)来存放控制信息包过滤处理的规则集。每张表由链(Chain)组成，每条链又包含了多条规则(rule)。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;iptables&lt;/code&gt;是用来编辑操作这些表的一个工具。&lt;code&gt;iptables&lt;/code&gt;包中也包含了针对IPv6的工具&lt;code&gt;ip6tables&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;四个表及其包含的链：&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;filter&#xA;&lt;ul&gt;&#xA;&lt;li&gt;INPUT&lt;/li&gt;&#xA;&lt;li&gt;FORWARD&lt;/li&gt;&#xA;&lt;li&gt;OUTPUT&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;nat&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PREROUTING&lt;/li&gt;&#xA;&lt;li&gt;POSTROUTING&lt;/li&gt;&#xA;&lt;li&gt;OUTPUT&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;mangle&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PREROUTING&lt;/li&gt;&#xA;&lt;li&gt;INPUT&lt;/li&gt;&#xA;&lt;li&gt;FORWARD&lt;/li&gt;&#xA;&lt;li&gt;OUTPUT&lt;/li&gt;&#xA;&lt;li&gt;POSTROUTING&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;raw&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PREROUTING&lt;/li&gt;&#xA;&lt;li&gt;OUTPUT&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;figure class=&#34;&#34;&gt;&#xA;&#xA;    &lt;div&gt;&#xA;        &lt;img loading=&#34;lazy&#34; alt=&#34;img&#34; src=&#34;http://localhost:1313/img/2016-11-29-iptables-usage_1.png&#34; &gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;filter机制&#34;&gt;&#xA;  filter机制&#xA;  &lt;a href=&#34;#filter%e6%9c%ba%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;filter&lt;/code&gt;是&lt;code&gt;netfilter&lt;/code&gt;中最重要的机制，其任务是执行数据包的过滤操作。具有三种内建链：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;INPUT - 来自外部的数据包（访问本机）&lt;/li&gt;&#xA;&lt;li&gt;OUTPUT - 发往外部的数据包（本机访问外部）&lt;/li&gt;&#xA;&lt;li&gt;FORWORD - “路过”本机的数据包，转发到其他设备&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;链中规则的匹配方式遵循&lt;code&gt;first match&lt;/code&gt;。&lt;code&gt;filter&lt;/code&gt;会根据数据包特征从相应链中的第一条规则开始逐一进行匹配。只要遇到满足特征的规则后便不再继续。&#xA;每条链在最底端都定义了默认规则。默认规则只会有一种状态：&lt;code&gt;ACCEPT&lt;/code&gt;或者&lt;code&gt;DROP&lt;/code&gt;。默认为&lt;code&gt;ACCEPT&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h2 class=&#34;heading&#34; id=&#34;iptables命令参数&#34;&gt;&#xA;  iptables命令参数&#xA;  &lt;a href=&#34;#iptables%e5%91%bd%e4%bb%a4%e5%8f%82%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;格式：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;操作方式&lt;/span&gt; [&lt;span style=&#34;color:#ff5c57&#34;&gt;链名&lt;/span&gt;] [&lt;span style=&#34;color:#ff5c57&#34;&gt;条件匹配&lt;/span&gt;] [&lt;span style=&#34;color:#ff5c57&#34;&gt;选项&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;[ACD] chain rule&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;specification [options]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;I chain [rulenum] rule&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;specification [options]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;R chain rulenum rule&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;specification [options]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;D chain rulenum [options]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;[LS] [chain [rulenum]] [options]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;[FZ] [chain] [options]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;[NX] chain&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;E old&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;chain&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;name new&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;chain&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;P chain target [options]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iptables &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;h (&lt;span style=&#34;color:#ff5c57&#34;&gt;print&lt;/span&gt; this help information)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;常用操作方式：&lt;/p&gt;</description>
    </item>
    <item>
      <title>composer中的autoload</title>
      <link>http://localhost:1313/section1/2016-11-05-php-composer-autoload/</link>
      <pubDate>Sat, 05 Nov 2016 02:42:06 +0000</pubDate>
      <guid>http://localhost:1313/section1/2016-11-05-php-composer-autoload/</guid>
      <description>&lt;p&gt;composer的autoload可以轻松的实现php的自动加载。在&lt;code&gt;composer.json&lt;/code&gt;中添加&lt;code&gt;autoload&lt;/code&gt;字段即可。当前支持 &lt;code&gt;PSR-0&lt;/code&gt; &lt;code&gt;PSR-4&lt;/code&gt; &lt;code&gt;classmap&lt;/code&gt;解析和&lt;code&gt;files&lt;/code&gt;包含。官方推荐PSR-4标准（添加类时不需要重新生成加载器）。&lt;/p&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;psr-4&#34;&gt;&#xA;  PSR-4&#xA;  &lt;a href=&#34;#psr-4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Under the &lt;code&gt;psr-4&lt;/code&gt; key you define a mapping from namespaces to paths, relative to the package root. When autoloading a class like &lt;code&gt;Foo\\Bar\\Baz&lt;/code&gt; a namespace prefix &lt;code&gt;Foo\\&lt;/code&gt; pointing to a directory &lt;code&gt;src/&lt;/code&gt; means that the autoloader will look for a file named &lt;code&gt;src/Bar/Baz.php&lt;/code&gt; and include it if present. Note that as opposed to the older PSR-0 style, the prefix (&lt;code&gt;Foo\\&lt;/code&gt;) is not present in the file path.&lt;/p&gt;</description>
    </item>
    <item>
      <title>幸せ</title>
      <link>http://localhost:1313/section1/2016-10-22-z/</link>
      <pubDate>Sat, 22 Oct 2016 16:56:54 +0000</pubDate>
      <guid>http://localhost:1313/section1/2016-10-22-z/</guid>
      <description>&lt;p&gt;:-)&lt;/p&gt;&#xA;&lt;p&gt;Look at the stars&lt;/p&gt;&#xA;&lt;p&gt;抬头仰望满天繁星&lt;/p&gt;&#xA;&lt;p&gt;Look how they shine for you&lt;/p&gt;&#xA;&lt;p&gt;看它们为你绽放着 闪烁不息&lt;/p&gt;&#xA;&lt;p&gt;And everything you do&lt;/p&gt;&#xA;&lt;p&gt;而你的一颦一举&lt;/p&gt;&#xA;&lt;p&gt;Yeah&amp;rsquo; they were all Yellow&lt;/p&gt;&#xA;&lt;p&gt;却满含胆怯和羞意&lt;/p&gt;&#xA;&lt;p&gt;I came along&lt;/p&gt;&#xA;&lt;p&gt;我追随着你的气息&lt;/p&gt;&#xA;&lt;p&gt;I wrote a song for you&lt;/p&gt;&#xA;&lt;p&gt;为你写下一首歌曲&lt;/p&gt;&#xA;&lt;p&gt;And all the things you do&lt;/p&gt;&#xA;&lt;p&gt;回想着你的所有举动和笑意&lt;/p&gt;&#xA;&lt;p&gt;it was called Yellow&lt;/p&gt;&#xA;&lt;p&gt;并用Yellow为这首歌命名&lt;/p&gt;&#xA;&lt;p&gt;So then I took my turn&lt;/p&gt;&#xA;&lt;p&gt;我耗尽心力&lt;/p&gt;&#xA;&lt;p&gt;Oh what a thing to have done&lt;/p&gt;&#xA;&lt;p&gt;用行动表达我的爱意&lt;/p&gt;&#xA;&lt;p&gt;And it was all Yellow&lt;/p&gt;&#xA;&lt;p&gt;噢这过程充满不安羞怯和点滴暖意&lt;/p&gt;&#xA;&lt;p&gt;Your skin&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
